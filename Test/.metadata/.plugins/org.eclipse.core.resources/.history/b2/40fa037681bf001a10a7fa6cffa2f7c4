package test;

import static io.restassured.RestAssured.given;

import java.lang.reflect.Method;

import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import testdata.ProfileTestData;

import utilities.APIRequest;
import utilities.ExtentReport;
import utilities.ResponseParser;
import utilities.Constants.ResponseCode;
import utilities.logger.LogsManager;

public class ProfileBase {

    protected static String token;
    static String csrfToken;
    protected static String laravelSession;

    static String userID;
    static String responseUsername;

    protected APIRequest request = null;

    /**
     * LogginManager instance which sets logger class as current class i.e. TestBase
     * class and all logs logged in this class will be saved in the Log4j
     * execution-log.txt file with this class reference. Log file can be found in
     * test-output/logs directory in the project root directory.
     */
    static LogsManager logManager = new LogsManager(ProfileBase.class.getName());

    // Purposefully initialized as class field so data set by some methods at
    // runtime will be available for other API methods
    protected ProfileTestData testData = new ProfileTestData();

    // Response parser is used to parse the response to get token and csrftoken
    // values
    protected ResponseParser parser = new ResponseParser();

    @BeforeSuite
    public void initializeExtentReport(ITestContext context) {

        logManager.logInformation("Executing Before Suite Method.", false, false);

        String suiteName = context.getCurrentXmlTest().getSuite().getName();

        try {
            ExtentReport.InitializeReport(suiteName);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /*
     * This method will be executed before every class execution. This method
     * creates new instance of object .
     */
    @BeforeClass
    public void getTokenAndLoadProfile() {
        request = new APIRequest();
        doLogin();
        loadHome();
        loadProfile();
        logManager.logClassProcessingStartedMessage(this.getClass().getName());
    }

    /*
     * This method will be executed before every method execution. This method
     * creates new instance of request object and set Base URI.
     */
    @BeforeMethod
    public void getNewInstanceOfRequest(Method method) {
        request = new APIRequest();
        request.setBaseURI(testData.baseURI);
        ExtentReport.initializeExtentReportTests(method);
        logManager.logMethodStartedMessage(method.getName());
    }

    @AfterMethod
    public void afterMethodUpdateExtentReportWithTestDetails(ITestResult result) {

        if (result.getStatus() == ITestResult.FAILURE) {

            logManager.logError("TEST CASE FAILED IS: " + result.getName());

            logManager.logError("TEST CASE FAILED REASON: " + result.getThrowable());

        } else if (result.getStatus() == ITestResult.SUCCESS) {

            logManager.logSuccess("TEST CASE PASSED IS: " + result.getName() + "\n\n");

        } else if (result.getStatus() == ITestResult.SKIP) {

            logManager.logSkipped("TEST CASE SKIPPED IS: " + result.getName(), true, true);
        }

        ExtentReport.flushReport();

        logManager.logMethodCompletedMessage(result.getName());
    }

    @AfterClass
    public void classExecutionCompleted() {
        logManager.logClassProcessingCompletedMessage(this.getClass().getName());

    }

    /**
     * This method adds common headers and authentication needed for all requests.
     */
    public void addHeadersInRequest() {
        request.setCookie("gatekeeper_laravel_session", laravelSession);
        request.setCookie("XSRF-TOKEN", csrfToken);
        request.setCookie("X-XSRF-TOKEN", "eyJpdiI6IkUwM2NuVWR0U2grOTdSWGh4NHNManc9PSIsInZhbHVlIjoiblwvWmVDTnhQM1VVOFBTdXM4WUxVbmhoaFlGOXBPeHV1aGxaSFk4elwvNUZiK0pWamEyNWtmMHFacDM3TzBVbGJjRE1uRFpKcXRjMGJCemNkb0VKSjh5QT09IiwibWFjIjoiOGY5ZWU2YzAwMGIwN2NkMmRiMTI2MDY2YWI5MDg2OWFmZjBlYTJlZTZlM2M1YzIzMTY2N2JmNmU0YTFlMDUyZCJ9");
        request.setCookie("X-CSRF-TOKEN", "7LT6QMeR16KiFvSLNcXLV4dkot1EY9mWTr9AIieC");
        request.setCookie("Cookie", "8ddb990525e659ccf2f0cc3dc8bc39db=b9a8d13dd5355bab76b8bf860dade627; _gid=GA1.4.1618702323.1594014859; bridges_laravel_session=zCJUtYPnbs1KYvAGEopdCgHjMeEETyDtC2Y01zCH; _gat_UA-88385230-1=1; laravel_token=eyJpdiI6ImFOVGhSU1lGWE5LNGc1WU8wUXdrd1E9PSIsInZhbHVlIjoidzdIMGRQYjkrK2pRT1Q4MTlybzlqSEVPWFdNemJ3b2lQUlRLeWlUN0NRQnZPQTRxM3Rmd3ZLRHdcL2h1TFJpYmhYMzBXeElCWGZ1MkI2NnBYR01Ib1k1eFQwSWIycFg2c0xzNVwvanppZzhCWTBNNWxwQ0JLUlkyK2t4aUJmdkQ5VnJPUUJJMmRyeSsrT2VrYVlmMUt3eXlvRGg2Smw0d2twN1ZKWkpodlNPdmp0NE9qbmN6MmdLaXErR2ROXC90cDdkRU5LM25lb2hQNkQraDQ4SE5uME9cL2Q4aHVRMDFNQ2F0NFwvYzFoWlpqVStJZTNqOXhBYjNuTUl3TXliNGU5TVpFSFlha0wwcEVSYnR2Wm5RU1VkT2NnYzFwYk9ab0VDYW5wU1dlNGNSWUI5Zz0iLCJtYWMiOiJlM2U5Y2JhNDA5OWQ4MjljMjFiMWQyNjE1M2VlNDFhZmE0ODVmM2I0MDAxMGFjMWRjMjI1ZmZhYTEwYWM5ZmRjIn0%3D");
        request.setCookie("Referer", "https://cbbridges-test3.ot1.castlebranch.net/");
        request.setCookie("Accept-Language", "en-US,en;q=0.9");
        request.setCookie("Pragma", "no-cache");
        request.setCookie("X-Requested-With", "XMLHttpRequest");
        request.setCookie("Sec-Fetch-Site", "same-origin");
        request.setContentType(ContentType.JSON);
        request.setBearerToken(token);
    }

    public void addCrudBasePathInRequest(String basePathUrl) {
        request.setBasePath(basePathUrl);
    }

    /**
     * This method logins the user in the application. Response code returned after
     * successful login is 302.
     */
    public void doLogin() {

        logManager.logInformation("Checking do Login.", true, true);
        request.setBaseURI(testData.baseURI);

        request.setFormData("username", testData.username);
        request.setFormData("password", testData.password);

        // Request.build will give the RequestSpecification object
        Response response = given().spec(request.build()).post("/login");
        logManager.logInformation("Status Code: " + response.getStatusCode(), true, true);

        // Purposefully keeping this check as Login returns 302 - Redirected status
        // instead of 200

        laravelSession = parser.getLaravelSession(response);

        logManager.logInformation("Login Completed.\n\n", true, true);
    }

    /**
     * This method loads the home page of the application. Response code returned
     * after successful home page load is 200.
     */
    public void loadHome() {
        logManager.logInformation("Loading home API to get token and Laravel Session.", true, true);

        request.setBaseURI(testData.baseURI);

        request.setCookie("gatekeeper_laravel_session", laravelSession);

        Response response = given().spec(request.build()).get("/home");
        logManager.logInformation("Status Code: " + response.getStatusCode(), true, true);
        Assert.assertTrue(response.getStatusCode() == ResponseCode.OK_200);

        token = parser.getTokenFromResponse(response.asString());
        csrfToken = parser.getCSRFTokenFromResponse(response.asString());

        logManager.logInformation("Found Token and CSRF Token. Load Home completed.\n\n", true, true);
    }

    public void loadProfile() {
        logManager.logInformation("Checking profile load.", true, true);

        request.setBaseURI(testData.baseURI);

        addCrudBasePathInRequest(testData.loadProfileBasePath);

        addHeadersInRequest();

        Response response = given().spec(request.build()).get("/cbprofile");
        logManager.logInformation("Status Code: " + response.getStatusCode(), true, true);
        Assert.assertTrue(response.getStatusCode() == ResponseCode.OK_200);

        laravelSession = parser.getLaravelSession(response);

        JsonPath jsonResponse = response.jsonPath();

        String profileId = jsonResponse.get("data.id");

        /*
         * setProfileId method sets data in input object MAPs and used in edit and
         * delete API requests
         */
        testData.setProfileId(profileId);
        userID = jsonResponse.get("data.userId");
        testData.setUserId(userID);
        responseUsername = jsonResponse.getString("data.username");

        logManager.logInformation(
                "id: " + testData.profileId + "\nuserID: " + userID + "\nusername: " + responseUsername, true, true);

        logManager.logInformation("Checking profile load Completed.\n\n", true, true);

    }

}
